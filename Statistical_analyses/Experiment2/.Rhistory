# mgcv_1.8.28_url = 'https://cran.r-project.org/src/contrib/Archive/mgcv/mgcv_1.8-28.tar.gz'
# itsadug_2.3_url = 'https://cran.r-project.org/src/contrib/Archive/itsadug/itsadug_2.3.tar.gz'
# install.packages(mgcv_1.8.28_url, repos=NULL, type="source")
# install.packages(itsadug_2.3_url, repos=NULL, type="source")
# Loading libraries
library(mgcv) # To build GAMMs
library(itsadug) #  For visualising interactions effects in GAMs
library(data.table)
library(tictoc)
library(ggplot2)
# Number of processor threads to use (change as appropriate)
nthreads = NTHREADS
options(show.signif.stars=FALSE)
####################
# A helper function
####################
### To Add letter labels to figures
### From: https://logfc.wordpress.com/2017/03/15/adding-figure-labels-a-b-c-in-the-top-left-corner-of-the-plotting-region/
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
##########################################################
# Loading data and preprocessing steps before fitting GAMMs
##########################################################
### Load data
data_all = as.data.table(readRDS("./Data/data_all.rds"))
### Number of subjects and trials
N_subj = length(unique(data_all$SubNo)); N_subj # 24
N_tr = length(unique(data_all$TrialNo)); N_tr # 200
### Add lags of the dependent variable up to the 5th order
# First add the necessary columns
N_obs = nrow(data_all)
data_all$RewardedOrNot_lag1 = NA
data_all$IsStateIdentical = NA
# Transform RewardedOrNot into a numerical variable
data_all$RewardedOrNot = as.numeric(as.character(data_all$RewardedOrNot))
data_all$IsStateIdentical = as.numeric(as.character(data_all$IsStateIdentical))
for (j in 1:N_subj){
data_all$RewardedOrNot_lag1[((j-1)*N_tr+2):(j*N_tr)] = data_all$RewardedOrNot[((j-1)*N_tr+1):(j*N_tr-1)]
data_all$IsStateIdentical[((j-1)*N_tr+2):(j*N_tr)] = (data_all$State[((j-1)*N_tr+2):(j*N_tr)] == data_all$State[((j-1)*N_tr+1):(j*N_tr-1)])
}
# Transform into factor columns
data_all$RewardedOrNot = as.factor(as.character(data_all$RewardedOrNot))
data_all$RewardedOrNot_lag1 = as.factor(as.character(data_all$RewardedOrNot_lag1))
data_all$IsStateIdentical = as.factor(as.character(data_all$IsStateIdentical))
### Create a new factor that combine Condition and IsStateIdentical
data_all$CondByIsState = interaction(data_all$Condition,  data_all$IsStateIdentical)
load("./Results/RR_final.rda")
png('./Results/GAMM_behav_effectplots_exp1.png', he=6, wi=11, units='in', res=300)
par(mfrow = c(1,2))
plot(RR_final, select = 2, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'Test condition', xlab = 'Trial', ylab = 'Partial effect')
grid()
fig_label(LETTERS[1], cex=1.7)
set.seed(1)
plot_diff(RR_final, view="TrialNo",
comp=list(Condition=c("control", "test")),
cond = list(RewardedOrNot_lag1 = '1', IsStateIdentical = '1'), # Doesn't matter as there is not interaction with reward
cex.lab = 1.2,
main = 'Difference Control - Test',
xlab = 'Trial',
ylab = 'Difference in fitted logit-transformed P(rewarded)')
grid()
fig_label(LETTERS[2], cex=1.7)
dev.off()
gc()
# Defining the path to the working directory (change the path as appropriate)
WD = "C:/Users/aezzizi/Documents/Work/Lectureship_Suffolk/Research/My_work/RL_under_uncertainty/Package_to_share/Statistical_analyses/Experiment2"
setwd(WD)
# Loading libraries
library(mgcv) # To build GAMMs
library(itsadug) #  For visualising interactions effects in GAMs
library(data.table)
library(tictoc)
library(ggplot2)
# Number of processor threads to use (change as appropriate)
nthreads = NTHREADS
options(show.signif.stars=FALSE)
####################
# A helper function
####################
### To Add letter labels to figures
### From: https://logfc.wordpress.com/2017/03/15/adding-figure-labels-a-b-c-in-the-top-left-corner-of-the-plotting-region/
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
################################################################
# Loading data and preprocessing steps before running the GAMMs
################################################################
### Load data
data_all = as.data.table(readRDS("./Data/data_all.rds"))
### Defining the reference level for the uncertainty condition
### (SU is the ref level)
data_all = within(data_all, UncerCond <- relevel(UncerCond, ref = "SU"))
### Number of subjects and trials
N_subj = length(unique(data_all$SubNo)); N_subj # 61
N_tr = length(unique(data_all$TrialNo)); N_tr # 200
### Add lags of the dependent variable up to the 5th order
# First add the necessary columns
N_obs = nrow(data_all)
data_all$RewardedOrNot_lag1 = NA
data_all$IsStateIdentical = NA
# Transform RewardedOrNot into a numerical variable
data_all$RewardedOrNot = as.numeric(as.character(data_all$RewardedOrNot))
data_all$IsStateIdentical = as.numeric(as.character(data_all$IsStateIdentical))
for (j in 1:N_subj){
data_all$RewardedOrNot_lag1[((j-1)*N_tr+2):(j*N_tr)] = data_all$RewardedOrNot[((j-1)*N_tr+1):(j*N_tr-1)]
data_all$IsStateIdentical[((j-1)*N_tr+2):(j*N_tr)] = (data_all$State[((j-1)*N_tr+2):(j*N_tr)] == data_all$State[((j-1)*N_tr+1):(j*N_tr-1)])
}
# Transform into factor columns
data_all$RewardedOrNot = as.factor(as.character(data_all$RewardedOrNot))
data_all$RewardedOrNot_lag1 = as.factor(as.character(data_all$RewardedOrNot_lag1))
data_all$IsStateIdentical = as.factor(as.character(data_all$IsStateIdentical))
### Create a new factor that combine Uncertainty cond and IsStateIdentical
data_all$CondByIsState = interaction(data_all$UncerCond,  data_all$IsStateIdentical)
load("./Results/RR_final.rda")
summary(RR_final)
png('./Results/GAMM_behav_effectplots_exp2.png', he=9, wi=9, units='in', res=300)
par(mfrow = c(3,2))
plot(RR_final, select = 1, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'SU condition: Different state', xlab = '', ylab = 'Partial effect')
grid()
fig_label("A", cex=1.7)
plot(RR_final, select = 4, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'RU condition: Same state', xlab = '', ylab = '')
grid()
fig_label("B", cex=1.7)
### Difference SU:same - SU:different
plot_diff(RR_final, view="TrialNo",
comp=list(CondByIsState=c("SU.1", "SU.0")),
cond = list(RewardedOrNot_lag1 = '1'), # Doesn't matter as there is not interaction with reward
rm.ranef = c("SubNo"),
main = 'Difference SU:same - SU:different',
xlab = '',
ylab = 'Difference in fitted logit-transformed P(rewarded)')
grid()
fig_label("C", cex=1.7)
# TrialNo window(s) of significant difference(s):
#   2.000000 - 40.000000
#   66.000000 - 88.000000
#   100.000000 - 200.000000
### Difference RU:same - RU:different
plot_diff(RR_final, view="TrialNo",
comp=list(CondByIsState=c("RU.1", "RU.0")),
cond = list(RewardedOrNot_lag1 = '1'), # Doesn't matter as there is not interaction with reward
rm.ranef = c("SubNo"),
main = 'Difference RU:same - RU:different',
xlab = '',
ylab = ''
#ylab = 'Difference in fitted logit-transformed P(rewarded)'
)
grid()
fig_label("D", cex=1.7)
plot_diff(RR_final, view="TrialNo",
comp=list(CondByIsState=c("SU.1", "RU.1")),
cond = list(RewardedOrNot_lag1 = '1'), # Doesn't matter as there is not interaction with reward
rm.ranef = c("SubNo"),
main = 'Difference SU:same - RU:same',
#xlab = '',
xlab = 'Trial',
ylab = 'Difference in fitted logit-transformed P(rewarded)')
grid()
fig_label("E", cex=1.7)
# TrialNo window(s) of significant difference(s):
#   4.000000 - 200.000000
### Difference SU:different - RU:different
plot_diff(RR_final, view="TrialNo",
comp=list(CondByIsState=c("SU.0", "RU.0")),
cond = list(RewardedOrNot_lag1 = '1'), # Doesn't matter as there is not interaction with reward
rm.ranef = c("SubNo"),
main = 'Difference SU:different - RU:different',
xlab = 'Trial',
ylab = ''
#ylab = 'Difference in fitted logit-transformed P(rewarded)'
)
grid()
fig_label("F", cex=1.7)
# TrialNo window(s) of significant difference(s):
#   38.000000 - 66.000000
#   94.000000 - 94.000000
#   100.000000 - 140.000000
dev.off()
### This script reproduces the GAMM results reported in the section
### "4.2. Results and discussion" within the "computational modelling"
### section
###
### Script written by Dr Adnane Ez-zizi (last modified on 16/07/2022).
##################################
# Set WD and load libraries
##################################
# Defining useful paths (change the path "TOP" as appropriate)
TOP = "C:/Users/aezzizi/Documents/Work/Lectureship_Suffolk/Research/My_work/RL_under_uncertainty/Package_to_share/"
WD = paste0(TOP, "Statistical_analyses/Experiment2")
# Simulated data from all models
SIM_DATA_EXP2 = paste0(TOP, "Computational_modelling/Experiment2/FitSimulations_exp2.mat")
# Set the working directory
setwd(WD)
# Loading libraries
library(mgcv) # To build GAMMs
library(itsadug) # For visualising interactions effects in GAMs
library(data.table)
library(R.matlab)
library(tictoc)
library(ggplot2)
# Number of processor threads to use (change as appropriate)
nthreads = NTHREADS
options(show.signif.stars=FALSE)
# Number of processor threads to use (change as appropriate)
NTHREADS = 3
options(show.signif.stars=FALSE)
### To Add letter labels to figures
### From: https://logfc.wordpress.com/2017/03/15/adding-figure-labels-a-b-c-in-the-top-left-corner-of-the-plotting-region/
fig_label <- function(text, region="figure", pos="topleft", cex=NULL, ...) {
region <- match.arg(region, c("figure", "plot", "device"))
pos <- match.arg(pos, c("topleft", "top", "topright",
"left", "center", "right",
"bottomleft", "bottom", "bottomright"))
if(region %in% c("figure", "device")) {
ds <- dev.size("in")
# xy coordinates of device corners in user coordinates
x <- grconvertX(c(0, ds[1]), from="in", to="user")
y <- grconvertY(c(0, ds[2]), from="in", to="user")
# fragment of the device we use to plot
if(region == "figure") {
# account for the fragment of the device that
# the figure is using
fig <- par("fig")
dx <- (x[2] - x[1])
dy <- (y[2] - y[1])
x <- x[1] + dx * fig[1:2]
y <- y[1] + dy * fig[3:4]
}
}
# much simpler if in plotting region
if(region == "plot") {
u <- par("usr")
x <- u[1:2]
y <- u[3:4]
}
sw <- strwidth(text, cex=cex) * 60/100
sh <- strheight(text, cex=cex) * 60/100
x1 <- switch(pos,
topleft     =x[1] + sw,
left        =x[1] + sw,
bottomleft  =x[1] + sw,
top         =(x[1] + x[2])/2,
center      =(x[1] + x[2])/2,
bottom      =(x[1] + x[2])/2,
topright    =x[2] - sw,
right       =x[2] - sw,
bottomright =x[2] - sw)
y1 <- switch(pos,
topleft     =y[2] - sh,
top         =y[2] - sh,
topright    =y[2] - sh,
left        =(y[1] + y[2])/2,
center      =(y[1] + y[2])/2,
right       =(y[1] + y[2])/2,
bottomleft  =y[1] + sh,
bottom      =y[1] + sh,
bottomright =y[1] + sh)
old.par <- par(xpd=NA)
on.exit(par(old.par))
text(x1, y1, text, cex=cex, ...)
return(invisible(c(x,y)))
}
### Make partial effect plots for a given model
partial_effect_plots <- function(gam_model) {
par(mfrow = c(2,2))
plot(gam_model, select = 1, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'SU condition: Different state', xlab = 'Trial', ylab = 'Partial effect')
grid()
fig_label("A", cex=1.7)
plot(gam_model, select = 3, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'SU condition: Same state', xlab = 'Trial', ylab = '')
grid()
fig_label("B", cex=1.7)
plot(gam_model, select = 2, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'RU condition: Different state', xlab = 'Trial', ylab = 'Partial effect')
grid()
fig_label("C", cex=1.7)
plot(gam_model, select = 4, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'RU condition: Same state', xlab = 'Trial', ylab = '')
grid()
fig_label("D", cex=1.7)
}
### Make interaction plots for a given model
interaction_plots <- function(gam_model) {
#par(mfrow=c(2,2))
### Difference SU:same - SU:different
plot_diff(gam_model, view="TrialNo",
comp=list(CondByIsState=c("SU.1", "SU.0")),
cond = list(RewardedOrNot_lag1 = '1'), # Doesn't matter as there is not interaction with reward
rm.ranef = c("SubNo"),
main = 'Difference SU:same - SU:different',
xlab = '',
ylab = 'Difference in fitted logit-transformed P(rewarded)')
grid()
fig_label("C", cex=1.7)
### Difference RU:same - RU:different
plot_diff(gam_model, view="TrialNo",
comp=list(CondByIsState=c("RU.1", "RU.0")),
cond = list(RewardedOrNot_lag1 = '1'), # Doesn't matter as there is not interaction with reward
rm.ranef = c("SubNo"),
main = 'Difference RU:same - RU:different',
xlab = '',
ylab = ''
)
grid()
fig_label("D", cex=1.7)
### Difference SU:same - RU:same
set.seed(1)
plot_diff(gam_model, view="TrialNo",
comp=list(CondByIsState=c("SU.1", "RU.1")),
cond = list(RewardedOrNot_lag1 = '1'), # Doesn't matter as there is not interaction with reward
rm.ranef = c("SubNo"),
main = 'Difference SU:same - RU:same',
xlab = 'Trial',
ylab = 'Difference in fitted logit-transformed P(rewarded)')
grid()
fig_label("E", cex=1.7)
### Difference SU:different - RU:different
plot_diff(gam_model, view="TrialNo",
comp=list(CondByIsState=c("SU.0", "RU.0")),
cond = list(RewardedOrNot_lag1 = '1'), # Doesn't matter as there is not interaction with reward
rm.ranef = c("SubNo"),
main = 'Difference SU:different - RU:different',
xlab = 'Trial',
ylab = ''
)
grid()
fig_label("F", cex=1.7)
}
### Here we will add simulated data from each model to  to the behavioural dataset
# Load behavioural data
data_all = read.csv(file = "./Data/Data_all.csv")
# Load model data
Rrel_exp2 = readMat(SIM_DATA_EXP2)
Rrel_SU_WTA = Rrel_exp2$R.rel.SU.WTA.rhofree
Rrel_SU_PWRL = Rrel_exp2$R.rel.SU.PWRL.rhofree
Rrel_SU_BISAW = Rrel_exp2$R.rel.SU.BISAW.rhofree
Rrel_RU_BISAW = Rrel_exp2$R.rel.RU.BISAW
Rrel_RU_SARSA = Rrel_exp2$R.rel.RU.SARSA
# Add proportions of reward collected by each model
data_all$RewardProp_WTA = c(as.vector(Rrel_SU_WTA), as.vector(Rrel_RU_SARSA))
data_all$RewardProp_PWRL = c(as.vector(Rrel_SU_PWRL), as.vector(Rrel_RU_SARSA))
data_all$RewardProp_BISAW = c(as.vector(Rrel_SU_BISAW), as.vector(Rrel_RU_BISAW))
# Add number of reward successes for each model (out of 100 simulations per trial/model)
data_all$RewardSucc_WTA = data_all$RewardProp_WTA * 100
data_all$RewardSucc_PWRL = data_all$RewardProp_PWRL * 100
data_all$RewardSucc_BISAW = data_all$RewardProp_BISAW * 100
# Add number of reward successes for each model (out of 100 simulations per trial/model)
data_all$RewardFail_WTA = 100 - data_all$RewardSucc_WTA
data_all$RewardFail_PWRL = 100 - data_all$RewardSucc_PWRL
data_all$RewardFail_BISAW = 100 - data_all$RewardSucc_BISAW
# Export the final dataset
write.csv(data_all, file = "./Data/Data_all_withModels.csv")
saveRDS(data_all, file = "./Data/Data_all_withModels.rds")
############################################################
# Preprocessing steps before fitting GAMMs
############################################################
### Defining the reference level for the uncertainty condition
### (SU is the ref level)
data_all$UncerCond = as.factor(as.character(data_all$UncerCond))
data_all = within(data_all, UncerCond <- relevel(UncerCond, ref = "SU"))
### Number of subjects and trials
N_subj = length(unique(data_all$SubNo)); N_subj # 61
N_tr = length(unique(data_all$TrialNo)); N_tr # 200
### Add lags of the dependent variable up to the 5th order
# First add the necessary columns
N_obs = nrow(data_all)
data_all$RewardProp_PWRL_lag1 = NA
data_all$RewardProp_WTA_lag1 = NA
data_all$RewardProp_BISAW_lag1 = NA
data_all$IsStateIdentical = NA
# Transform IsStateIdentical into a numerical variable
data_all$IsStateIdentical = as.numeric(as.character(data_all$IsStateIdentical))
# Fill in the columns
for (j in 1:N_subj){
data_all$RewardProp_PWRL_lag1[((j-1)*N_tr+2):(j*N_tr)] = data_all$RewardProp_PWRL[((j-1)*N_tr+1):(j*N_tr-1)]
data_all$RewardProp_WTA_lag1[((j-1)*N_tr+2):(j*N_tr)] = data_all$RewardProp_WTA[((j-1)*N_tr+1):(j*N_tr-1)]
data_all$RewardProp_BISAW_lag1[((j-1)*N_tr+2):(j*N_tr)] = data_all$RewardProp_BISAW[((j-1)*N_tr+1):(j*N_tr-1)]
data_all$IsStateIdentical[((j-1)*N_tr+2):(j*N_tr)] = (data_all$State[((j-1)*N_tr+2):(j*N_tr)] == data_all$State[((j-1)*N_tr+1):(j*N_tr-1)])
}
# Transform into factor columns
data_all$IsStateIdentical = as.factor(as.character(data_all$IsStateIdentical))
### Create a new factor that combine Uncertainty cond and IsStateIdentical
data_all$CondByIsState = interaction(data_all$UncerCond,  data_all$IsStateIdentical)
# Model summary (p-values reported in Table 5 - "Simple RL" column)
tic()
gamm_WTA = bam(cbind(RewardSucc_WTA, RewardFail_WTA) ~ CondByIsState
+ RewardProp_WTA_lag1
+ s(TrialNo, by = CondByIsState, bs="ad")
+ s(TrialNo, SubNo, bs="fs"),
data = data_all, family = "binomial", nthreads = NTHREADS)
toc() # 21 sec elapsed
summary(gamm_WTA)
### Effect plots (Figure 14)
png('./Results/GAMM_WTA_effectplots.png', he=9, wi=9, units='in', res=300)
par(mfrow = c(3,2))
plot(gamm_WTA, select = 1, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'SU condition: Different state', xlab = '', ylab = 'Partial effect')
grid()
fig_label("A", cex=1.7)
plot(gamm_WTA, select = 3, shade = TRUE, scale = 0, rug = FALSE, cex.lab = 1.2,
main = 'SU condition: Same state', xlab = '', ylab = '')
grid()
fig_label("B", cex=1.7)
interaction_plots(gamm_WTA)
dev.off()
